name: Mock Integration Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'cdk/**'

jobs:
  mock-integ-test:
    name: Mock Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cdk
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Docker for ADOT and App containers
        uses: docker/setup-buildx-action@v3
      
      # サイドカーコンテナをセットアップ（テスト用のモックアウト）
      - name: Setup mock container infrastructure
        run: |
          mkdir -p ./mock-test
          echo "# Mock Directory for integ test environment" > ./mock-test/README.md
      
      # 統合テスト用にCanaryのアセットディレクトリを準備
      - name: Setup Canary assets
        run: |
          mkdir -p lib/assets/canary/nodejs/node_modules/nodejs/node_modules
          echo 'exports.handler = async () => { return "ok" };' > lib/assets/canary/nodejs/node_modules/nodejs/node_modules/index.js
      
      # スタックがテスト環境で正常に構築できることを確認
      - name: Execute mock integ test for cdk-stack
        run: |
          # 実際のAWSデプロイを行わないテストモードでの確認
          APP_TAG=test-mock ADOT_TAG=test-mock npx ts-node test/integ.cdk-stack.ts
          echo "✅ integ.cdk-stack.ts successfully synthesized without errors"
      
      - name: Execute mock integ test for application-signals
        run: |
          # 実際のAWSデプロイを行わないテストモードでの確認
          APP_TAG=test-mock ADOT_TAG=test-mock npx ts-node test/integ.application-signals.ts
          echo "✅ integ.application-signals.ts successfully synthesized without errors"