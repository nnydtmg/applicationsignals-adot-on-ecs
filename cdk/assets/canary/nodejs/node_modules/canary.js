const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const syntheticsConfiguration = synthetics.getConfiguration();

// アプリケーションの検証用の URL
const baseUrl = process.env.URL || 'http://example.com';
const rollDiceEndpoint = `${baseUrl}/rolldice?rolls=12`;

// レポートリクエストとHeaders等の設定
syntheticsConfiguration.setConfig({
    restrictedHeaders: ['X-Amz-Security-Token', 'Authorization'],
    restrictedUrlParameters: ['Auth'],
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    includeRequestBody: true,
    includeResponseBody: true,
    environmentVariables: {
        APPLICATION_SIGNALS_INTEGRATION: 'true',
        SERVICE_NAME: 'dice-server-canary'
    }
});

// canary関数
const pageLoadBlueprint = async function () {
    // Application Signalsに統合するための情報を追加
    syntheticsConfiguration.withEnvironmentVariable('OTEL_RESOURCE_ATTRIBUTES', 'service.name=dice-server-canary');
    
    // ヘッダーの定義
    const headers = {
        'User-Agent': 'CloudWatch Synthetics Canary',
        'X-Canary': 'true'
    };

    let page;
    try {
        // ステップ1: ベースページを開く
        log.info(`Navigating to base URL: ${baseUrl}`);
        
        // ページに移動
        page = await synthetics.getPage();
        const response = await page.goto(baseUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        
        // レスポンスコードの確認
        if (response.status() !== 200) {
            throw new Error(`Failed to load page. Status code: ${response.status()}`);
        }
        
        await synthetics.takeScreenshot('base_page_loaded', 'loaded');
        
        // ステップ2: /rolldice?rolls=12 エンドポイントを呼び出す
        log.info('Testing the rolldice endpoint');
        const rollDiceResponse = await page.goto(rollDiceEndpoint, { waitUntil: 'domcontentloaded', timeout: 30000 });
        
        if (rollDiceResponse.status() !== 200) {
            throw new Error(`Roll dice endpoint failed. Status code: ${rollDiceResponse.status()}`);
        }
        
        await synthetics.takeScreenshot('roll_dice_response', 'dice_rolled');
        
        const rollDiceContent = await page.content();
        log.info(`Roll dice response received with content length: ${rollDiceContent.length}`);
        
        // ステップ3: ヘルスチェックエンドポイントを呼び出す
        log.info('Testing the healthcheck endpoint');
        const healthCheckUrl = `${baseUrl}/healthcheck`;
        const healthResponse = await page.goto(healthCheckUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        
        if (healthResponse.status() !== 200) {
            throw new Error(`Healthcheck failed. Status code: ${healthResponse.status()}`);
        }
        
        log.info('Healthcheck successful');
        
    } catch (error) {
        log.error(`Failed to complete canary: ${error.message}`, error);
        throw error;
    } finally {
        if (page) {
            await page.close();
        }
    }
};

exports.handler = async () => {
    return await pageLoadBlueprint();
};