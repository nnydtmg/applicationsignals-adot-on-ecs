const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const syntheticsConfiguration = synthetics.getConfiguration();

// アプリケーションの検証用の URL
const url = process.env.URL || 'http://example.com';
const rollDiceEndpoint = `${url}/rolldice?rolls=12`;

// レポートリクエストとHeaders等の設定
syntheticsConfiguration.setConfig({
    restrictedHeaders: ['X-Amz-Security-Token', 'Authorization'],
    restrictedUrlParameters: ['Auth'],
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    includeRequestBody: true,
    includeResponseBody: true,
    environmentVariables: {
        APPLICATION_SIGNALS_INTEGRATION: 'true',
        SERVICE_NAME: 'dice-server-canary'
    }
});

// canary関数
const apiCanaryBlueprint = async function () {
    // Application Signalsに統合するための情報を追加
    syntheticsConfiguration.withEnvironmentVariable('OTEL_RESOURCE_ATTRIBUTES', 'service.name=dice-server-canary');
    
    // ヘッダーの定義
    const headers = {
        'User-Agent': 'CloudWatch Synthetics Canary',
        'X-Canary': 'true'
    };

    let requestOptions = {
        headers: headers
    };

    try {
        // APIエンドポイントを呼び出す (/rolldice?rolls=12)
        log.info(`Testing API endpoint: ${rollDiceEndpoint}`);
        let rollDiceResponse = await synthetics.executeHttpStep('Dice Roll API Test', rollDiceEndpoint, requestOptions);
        
        if (rollDiceResponse.statusCode !== 200) {
            throw new Error(`Roll dice endpoint failed. Status code: ${rollDiceResponse.statusCode}`);
        }
        
        log.info(`Roll dice API responded successfully with status code: ${rollDiceResponse.statusCode}`);
        
    } catch (error) {
        log.error(`Failed to complete canary: ${error.message}`, error);
        throw error;
    }
};

exports.handler = async () => {
    return await apiCanaryBlueprint();
};